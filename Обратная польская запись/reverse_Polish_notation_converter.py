my_stack,res = list(),str() #"стек" и строка для формирования результата
expression = input('Введите выражение: ') #ввод алгебраического выражения
symbols = {'*': 3,'/': 3,'+': 2,'-': 2,'(': 1} #словарь для определения приоритетов операций
for i in expression: 
    if i.isdigit() or i.isalpha(): #текущий символ - буква или цифра
        res += i #прибавляем к строке результата
    elif i in '*/+-': #поступил символ операции
        if not len(my_stack) or symbols[my_stack[-1]]<symbols[i]: #Если стек все еще пуст, или находящиеся в нем символы имеют меньший приоритет, чем приоритет текущего символа
            my_stack.append(i) #помещаем текущий символ в стек
        elif symbols[my_stack[-1]] >= symbols[i]: #символ, находящийся на вершине стека имеет приоритет, больший или равный приоритету текущего символа
            while len(my_stack) and symbols[my_stack[-1]] >= symbols[i]: # извлекаем символы из стека в выходную строку до тех пор, пока выполняется это условие
                res += my_stack.pop()
            my_stack.append(i) #добавляем символ в стек
    elif i == '(': #Если текущий символ - открывающая скобка, то помещаем ее в стек
        my_stack.append(i)
    elif i == ')': #Если текущий символ - закрывающая скобка, то извлекаем символы из стека в выходную строку до тех пор, пока не встретим в стеке открывающую скобку
        while my_stack[-1] != '(':
            res += my_stack.pop()
        del my_stack[-1]            
print(f"Выражение в обратной польской записи: {res + ''.join(reversed(my_stack))}") #вывод выражения в ОПЗ
